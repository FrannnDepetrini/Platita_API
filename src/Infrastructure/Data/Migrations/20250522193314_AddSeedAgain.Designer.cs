// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250522193314_AddSeedAgain")]
    partial class AddSeedAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Domain.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupportId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DayPublicationEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DayPublicationStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PostulationSelectedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PostulationSelectedId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            City = "Rosario",
                            ClientId = 4,
                            DayPublicationEnd = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito pintar un monoambiente en el centro",
                            PaymentId = 1,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Pintar departamento"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            City = "Rosario",
                            ClientId = 4,
                            DayPublicationEnd = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Instalación de 10 luces LED en cocina y living",
                            PaymentId = 1,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Instalación de luces LED"
                        },
                        new
                        {
                            Id = 3,
                            Category = 4,
                            City = "La Plata",
                            ClientId = 5,
                            DayPublicationEnd = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patio de 100m2 con pasto alto, se necesita corte y limpieza",
                            PaymentId = 1,
                            Province = "Buenos Aires",
                            Status = 0,
                            Title = "Corte de pasto y desmalezado"
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            City = "Godoy Cruz",
                            ClientId = 6,
                            DayPublicationEnd = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hay una pérdida debajo del lavabo",
                            PaymentId = 1,
                            Province = "Mendoza",
                            Status = 0,
                            Title = "Reparar cañería del baño"
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            City = "Rosario",
                            ClientId = 6,
                            DayPublicationEnd = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito ayuda para mudar muebles pesados",
                            PaymentId = 1,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Mudanza de muebles"
                        },
                        new
                        {
                            Id = 6,
                            Category = 4,
                            City = "Marcos Juarez",
                            ClientId = 7,
                            DayPublicationEnd = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jardín de 50m2 con césped crecido",
                            PaymentId = 1,
                            Province = "Córdoba",
                            Status = 0,
                            Title = "Corte de césped y limpieza del jardín"
                        },
                        new
                        {
                            Id = 7,
                            Category = 9,
                            City = "Firmat",
                            ClientId = 8,
                            DayPublicationEnd = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Limpieza profunda de casa de 3 ambientes",
                            PaymentId = 1,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Limpieza de hogar"
                        },
                        new
                        {
                            Id = 8,
                            Category = 8,
                            City = "Bigand",
                            ClientId = 9,
                            DayPublicationEnd = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito un desarrollador fullstack para una app de gestión",
                            PaymentId = 1,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Programar aplicación web"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pagos digitales a través de MercadoPago. Rápido y seguro.",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Transferencia bancaria directa a la cuenta indicada por el usuario.",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Budget")
                        .HasColumnType("REAL");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JobDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("Postulations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 15000f,
                            ClientId = 6,
                            JobDay = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Budget = 14000f,
                            ClientId = 7,
                            JobDay = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Budget = 20000f,
                            ClientId = 4,
                            JobDay = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Budget = 18000f,
                            ClientId = 8,
                            JobDay = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            Budget = 22000f,
                            ClientId = 9,
                            JobDay = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.HasIndex("PaymentId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "marmax0504@gmail.com",
                            Password = "$2a$11$gvHVlHiREWJLfQeGp1b2VOw6JN00ujw4yafyK1SUofNp1nmM.mZwG",
                            PhoneNumber = "3496502453",
                            UserName = "Maximo Martin",
                            City = "Rosario",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 5,
                            Email = "joako.tanlon@gmail.com",
                            Password = "$2a$11$g7re2zUETmIhWH8W1mtxqucxlwgMUoxbW/SIYHzYxxttHC6uonxuy",
                            PhoneNumber = "3412122907",
                            UserName = "Joaquin Tanlongo",
                            City = "La Plata",
                            Province = "Buenos Aires"
                        },
                        new
                        {
                            Id = 6,
                            Email = "marucomass@gmail.com",
                            Password = "$2a$11$TyL/v04ux2WndlnlEz8ou./LfYDPIrZV31Rqz4axy6IINvEk39fTC",
                            PhoneNumber = "3467637190",
                            UserName = "Mario Massonnat",
                            City = "Rosario",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 7,
                            Email = "frandepe7@gmail.com",
                            Password = "$2a$11$eG7Jq.HX.hErj8IKOrvnAuNV7N.W3ndBwVJoBvCfpDRDcvEZOCvqu",
                            PhoneNumber = "3472582334",
                            UserName = "Francisco Depetrini",
                            City = "Marcos Juarez",
                            Province = "Córdoba"
                        },
                        new
                        {
                            Id = 8,
                            Email = "palenafrancisco@gmail.com",
                            Password = "$2a$11$cNiVRrkfafCmRLJyOcbTtuoL4t8gdzY/Bx.CuP/PX3q1Y.G/lEWZe",
                            PhoneNumber = "3465664518",
                            UserName = "Francisco Palena",
                            City = "Firmat",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 9,
                            Email = "pedrogasparini99@gmail.com",
                            Password = "$2a$11$uxWvXMILhSutRtHtv4nhvetHa8052e2ZySB0iWem3wm6NNkP1Hnnm",
                            PhoneNumber = "3464445164",
                            UserName = "Pedro Gasparini",
                            City = "Bigand",
                            Province = "Santa Fe"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Moderator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("Domain.Entities.Support", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Support");
                });

            modelBuilder.Entity("Domain.Entities.SysAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("SysAdmin");
                });

            modelBuilder.Entity("Domain.Entities.Complaint", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Support", "Support")
                        .WithMany("Complaints")
                        .HasForeignKey("SupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Support");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Postulation", "PostulationSelected")
                        .WithMany()
                        .HasForeignKey("PostulationSelectedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Payment");

                    b.Navigation("PostulationSelected");
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Postulations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("Postulations")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.HasOne("Domain.Entities.Client", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Payment", "PreferredPayment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.Navigation("PreferredPayment");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("Postulations");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Postulations");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.Support", b =>
                {
                    b.Navigation("Complaints");
                });
#pragma warning restore 612, 618
        }
    }
}

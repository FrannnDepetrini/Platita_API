// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250417150243_MigrationForTestingEndpointPut")]
    partial class MigrationForTestingEndpointPut
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Category = 2,
                            DateTime = new DateTime(2025, 4, 17, 12, 2, 43, 473, DateTimeKind.Local).AddTicks(9908),
                            Description = "busco electricista para que me cambie una lamparita",
                            EmployerName = "Juan",
                            Location = "Rosario",
                            Title = "Busco electricista"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Category = 1,
                            DateTime = new DateTime(2025, 4, 17, 12, 2, 43, 473, DateTimeKind.Local).AddTicks(9925),
                            Description = "busco plomero para arreglar mi bano",
                            EmployerName = "Maria",
                            Location = "Rosario",
                            Title = "Busco plomero"
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Category = 4,
                            DateTime = new DateTime(2025, 4, 17, 12, 2, 43, 473, DateTimeKind.Local).AddTicks(9928),
                            Description = "necesito cortar el pasto",
                            EmployerName = "Marta",
                            Location = "Buenos Aires",
                            Title = "Busco Jardinero"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}

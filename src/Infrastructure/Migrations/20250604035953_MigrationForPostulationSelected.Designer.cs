// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250604035953_MigrationForPostulationSelected")]
    partial class MigrationForPostulationSelected
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Domain.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DayPublicationEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DayPublicationStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostulationSelectedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PostulationSelectedId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 6,
                            City = "Rosario",
                            ClientId = 4,
                            DayPublicationEnd = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito pintar un monoambiente en el centro",
                            PostulationSelectedId = 2,
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Pintar departamento"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            City = "Rosario",
                            ClientId = 4,
                            DayPublicationEnd = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Instalación de 10 luces LED en cocina y living",
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Instalación de luces LED"
                        },
                        new
                        {
                            Id = 3,
                            Category = 4,
                            City = "La Plata",
                            ClientId = 5,
                            DayPublicationEnd = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patio de 100m2 con pasto alto, se necesita corte y limpieza",
                            PostulationSelectedId = 3,
                            Province = "Buenos Aires",
                            Status = 0,
                            Title = "Corte de pasto y desmalezado"
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            City = "Godoy Cruz",
                            ClientId = 6,
                            DayPublicationEnd = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hay una pérdida debajo del lavabo",
                            PostulationSelectedId = 5,
                            Province = "Mendoza",
                            Status = 0,
                            Title = "Reparar cañería del baño"
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            City = "Rosario",
                            ClientId = 6,
                            DayPublicationEnd = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito ayuda para mudar muebles pesados",
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Mudanza de muebles"
                        },
                        new
                        {
                            Id = 6,
                            Category = 4,
                            City = "Marcos Juarez",
                            ClientId = 7,
                            DayPublicationEnd = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jardín de 50m2 con césped crecido",
                            Province = "Córdoba",
                            Status = 0,
                            Title = "Corte de césped y limpieza del jardín"
                        },
                        new
                        {
                            Id = 7,
                            Category = 9,
                            City = "Firmat",
                            ClientId = 8,
                            DayPublicationEnd = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Limpieza profunda de casa de 3 ambientes",
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Limpieza de hogar"
                        },
                        new
                        {
                            Id = 8,
                            Category = 8,
                            City = "Bigand",
                            ClientId = 9,
                            DayPublicationEnd = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayPublicationStart = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necesito un desarrollador fullstack para una app de gestión",
                            Province = "Santa Fe",
                            Status = 0,
                            Title = "Programar aplicación web"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OneTimeToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OneTimeTokens");
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Budget")
                        .HasColumnType("REAL");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JobDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("Postulations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 15000f,
                            ClientId = 6,
                            JobDay = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Budget = 14000f,
                            ClientId = 7,
                            JobDay = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Budget = 20000f,
                            ClientId = 4,
                            JobDay = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Budget = 18000f,
                            ClientId = 8,
                            JobDay = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 5,
                            Budget = 22000f,
                            ClientId = 9,
                            JobDay = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 4,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "muy amable y hasta me ofrecio facturas.",
                            JobId = 1,
                            RatedByUserId = 7,
                            RatedUserId = 4,
                            Score = 4
                        },
                        new
                        {
                            Id = 2,
                            Description = "tipazo, muy prolijo!",
                            JobId = 1,
                            RatedByUserId = 4,
                            RatedUserId = 7,
                            Score = 5
                        },
                        new
                        {
                            Id = 3,
                            Description = "estaba de mal humor y me trato bastante mal",
                            JobId = 3,
                            RatedByUserId = 4,
                            RatedUserId = 5,
                            Score = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "me dejo el patio hecho un desastre",
                            JobId = 3,
                            RatedByUserId = 5,
                            RatedUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "el baño estaba un poco sucio. buen trato!",
                            JobId = 4,
                            RatedByUserId = 9,
                            RatedUserId = 6,
                            Score = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryReport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryReport = 3,
                            ClientId = 4,
                            Created_At = new DateTime(2025, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 8
                        },
                        new
                        {
                            Id = 2,
                            CategoryReport = 0,
                            ClientId = 5,
                            Created_At = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryReport = 3,
                            ClientId = 6,
                            Created_At = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobId = 7
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "marmax0504@gmail.com",
                            Password = "$2a$11$OCZCPMinj54gwyGdIqxOz.dbwZnGVOfhF6e2FrShY/U.HvSyENaBq",
                            PhoneNumber = "3496502453",
                            Role = 2,
                            UserName = "Maximo Martin",
                            City = "Rosario",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 5,
                            Email = "joako.tanlon@gmail.com",
                            Password = "$2a$11$8qoJRK5kzG.jq8Ilypu8JeMsxaQ9nnIz0cTeKMlcFNblIoy9cN/hW",
                            PhoneNumber = "3412122907",
                            Role = 2,
                            UserName = "Joaquin Tanlongo",
                            City = "La Plata",
                            Province = "Buenos Aires"
                        },
                        new
                        {
                            Id = 6,
                            Email = "marucomass@gmail.com",
                            Password = "$2a$11$PH9hYlqg40HiAu.c4ZsDc.L1FSu6MbhNkezj6/EHO9zKxJ9Y3bsty",
                            PhoneNumber = "3467637190",
                            Role = 2,
                            UserName = "Mario Massonnat",
                            City = "Rosario",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 7,
                            Email = "frandepe7@gmail.com",
                            Password = "$2a$11$3lHs3shV9uY5wqAi.SMJcORCDsfY3wtV0mXYA487XBaUwo5OiNxw2",
                            PhoneNumber = "3472582334",
                            Role = 2,
                            UserName = "Francisco Depetrini",
                            City = "Marcos Juarez",
                            Province = "Córdoba"
                        },
                        new
                        {
                            Id = 8,
                            Email = "palenafrancisco@gmail.com",
                            Password = "$2a$11$GG0VfUTVsT4uqUttat3qW.Icydh3WLFjxdr.KJxAysetVQcMgaJla",
                            PhoneNumber = "3465664518",
                            Role = 2,
                            UserName = "Francisco Palena",
                            City = "Firmat",
                            Province = "Santa Fe"
                        },
                        new
                        {
                            Id = 9,
                            Email = "pedrogasparini99@gmail.com",
                            Password = "$2a$11$RP4syRjJj/0jwiS1vuuzl.9xXQi4uAJVPiKA9n.G8EUx.EJxPOLNy",
                            PhoneNumber = "3464445164",
                            Role = 2,
                            UserName = "Pedro Gasparini",
                            City = "Bigand",
                            Province = "Santa Fe"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Moderator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "moderator@gmail.com",
                            Password = "$2a$11$Qo8mczr0dy.lznYPfvvkOeXEs/HUotPERYJ.FSqxBfc4jFXo5qSza",
                            PhoneNumber = "341987654321",
                            Role = 1,
                            UserName = "moderator1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Support", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "support@gmail.com",
                            Password = "$2a$11$ub4kkJHYd0evvKycoywX7u/TYFGl98ZmoCQGrxz.T25dsASuECcBG",
                            PhoneNumber = "341112233",
                            Role = 3,
                            UserName = "support1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SysAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "sysadmin@gmail.com",
                            Password = "$2a$11$1bJMxIuOOd.BEDOVeTmf8.BX5D/WPgSX/4mSMMef24vh4SVB6XUfi",
                            PhoneNumber = "341001122",
                            Role = 0,
                            UserName = "platita"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Complaint", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Postulation", "PostulationSelected")
                        .WithMany()
                        .HasForeignKey("PostulationSelectedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("PostulationSelected");
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Postulations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("Postulations")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.HasOne("Domain.Entities.Client", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany("Reports")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Navigation("Postulations");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Postulations");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}

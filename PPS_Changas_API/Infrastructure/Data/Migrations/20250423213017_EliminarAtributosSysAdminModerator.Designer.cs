// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250423213017_EliminarAtributosSysAdminModerator")]
    partial class EliminarAtributosSysAdminModerator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Category = 2,
                            DateTime = new DateTime(2025, 4, 23, 18, 30, 17, 6, DateTimeKind.Local).AddTicks(8930),
                            Description = "busco electricista para que me cambie una lamparita",
                            EmployerName = "Juan",
                            Location = "Rosario",
                            Title = "Busco electricista"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Category = 1,
                            DateTime = new DateTime(2025, 4, 23, 18, 30, 17, 6, DateTimeKind.Local).AddTicks(8944),
                            Description = "busco plomero para arreglar mi bano",
                            EmployerName = "Maria",
                            Location = "Rosario",
                            Title = "Busco plomero"
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Category = 4,
                            DateTime = new DateTime(2025, 4, 23, 18, 30, 17, 6, DateTimeKind.Local).AddTicks(8946),
                            Description = "necesito cortar el pasto",
                            EmployerName = "Marta",
                            Location = "Buenos Aires",
                            Title = "Busco Jardinero"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Budget")
                        .HasColumnType("REAL");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobId");

                    b.ToTable("Postulation");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Domain.Entities.Employer", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("Domain.Entities.Moderator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("Domain.Entities.SysAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("SysAdmin");
                });

            modelBuilder.Entity("Domain.Entities.Job", b =>
                {
                    b.HasOne("Domain.Entities.Employer", null)
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerId");
                });

            modelBuilder.Entity("Domain.Entities.Postulation", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Postulations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Domain.Entities.Rating", b =>
                {
                    b.HasOne("Domain.Entities.Employee", null)
                        .WithMany("Ratings")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Domain.Entities.Employer", null)
                        .WithMany("Ratings")
                        .HasForeignKey("EmployerId");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Postulations");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Entities.Employer", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
